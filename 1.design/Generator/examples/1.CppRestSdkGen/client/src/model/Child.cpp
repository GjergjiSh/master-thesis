/**
 * Family API
 * Basic API Specification
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Child.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Child::Child()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Parent = 0;
    m_ParentIsSet = false;
}

Child::~Child()
{
}

void Child::validate()
{
    // TODO: implement validation
}

web::json::value Child::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t(U("parent"))] = ModelBase::toJson(m_Parent);
    }

    return val;
}

bool Child::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parent")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setParent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParent);
            setParent(refVal_setParent);
        }
    }
    return ok;
}

void Child::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parent")), m_Parent));
    }
}

bool Child::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parent"))))
    {
        int32_t refVal_setParent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parent"))), refVal_setParent );
        setParent(refVal_setParent);
    }
    return ok;
}

int32_t Child::getId() const
{
    return m_Id;
}

void Child::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Child::idIsSet() const
{
    return m_IdIsSet;
}

void Child::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Child::getName() const
{
    return m_Name;
}

void Child::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Child::nameIsSet() const
{
    return m_NameIsSet;
}

void Child::unsetName()
{
    m_NameIsSet = false;
}
int32_t Child::getParent() const
{
    return m_Parent;
}

void Child::setParent(int32_t value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}

bool Child::parentIsSet() const
{
    return m_ParentIsSet;
}

void Child::unsetParent()
{
    m_ParentIsSet = false;
}
}
}
}
}


